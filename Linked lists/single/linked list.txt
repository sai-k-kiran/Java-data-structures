Linked list elements are not stored at a contiguous location; the elements are linked 
using pointers.

Advantages over arrays 
-----------------------
1. Dynamic size. 

In Linked list, we have the head node then we can traverse to any node through it and 
insert new node at the required position.
Size of the linked list is not fixed.

2. Ease of insertion and deletion

In arrays, if we insert or delete an element then we have to shist the elements accordingly.
This is an expensive process. This is not the case with the linked list

Diadvantages
------------

1. Random access is not allowed. We have to access elements sequentially starting from the 
first node(head node). So we cannot do binary search with linked lists efficiently with 
its default implementation.

2. Extra memory space for a pointer is required with each element of the list. 

3. Not cache friendly. Since array elements are contiguous locations, there is locality of 
reference which is not there in case of linked lists.

Representation
---------------

A linked list is represented by a pointer to the first node of the linked list. 
The first node is called the head. If the linked list is empty, then the value of the head 
points to NULL. 

Each node in a list consists of at least two parts: 
1) data (we can store integer, strings or any type of data).
2) Pointer (Or Reference) to the next node (connects one node to another)

In Java or C#, LinkedList can be represented as a class and a Node as a separate class. 
The LinkedList class contains a reference of Node class type. 


class LinkedList {
    Node head; // head of the list
  
    /* Linked list Node*/
    class Node {
        int data;
        Node next;
  
        // Constructor to create a new node
        // Next is by default initialized
        // as null
        Node(int d) { data = d; }
    }
}

----------------------------------------------------------------